# Allow the use of / operator for division to yield floats instead of integers:
# http://docs.python.org/whatsnew/2.2.html#pep-238-changing-the-division-operator
from __future__ import division

# Imports from standard libraries
from datetime import date, timedelta
import hashlib
import os
import simplejson
import urllib2

# Imports from Django
from django.conf import settings
from django.contrib.auth.models import User
from django.contrib.contenttypes import generic
from django.contrib.contenttypes.models import ContentType
from django.contrib.markup.templatetags.markup import markdown
from django.contrib.sites.models import Site
from django.core.files import File
from django.contrib.gis.db import models

# Imports from Brubeck
from brubeck.common.people.models import Person

# Imports from other sources
from pyPdf import PdfFileReader, PdfFileWriter

class Staffer(person):
    """Provides support for staffers' bylines.
    
    Some fields in this model might be marked as deprecated. These will be 
    hidden in the admin site.
    
    """
    WRITER_CHOICES = (
        ('Reporter',  "Reporter"),
        ('Staff Writer', "Staff Writer"),
        ('Senior Staff Writer',"Senior Staff Writer"),
    )
    PHOTOG_CHOICES = (
        ('Photographer',  "Photographer"),
        ('Staff Photographer', "Staff Photographer"),
        ('Senior Staff Photographer',"Senior Staff Photographer"),
    )
    writer_pos = models.CharField('writer position', max_length=19, blank=True, choices=WRITER_CHOICES, help_text="Deprecated. Was used to indicate a staffer's writer position, but was hard to keep updated. This is now calculated in a method instead.")
    photog_pos = models.CharField('photographer position', max_length=25, blank=True, choices=PHOTOG_CHOICES, help_text="Deprecated. Same problem (and same solution) as writer_pos.")
    is_active = models.BooleanField("active in the past year?", default=True, help_text="Autogenerated and autoupdated based on last posted article, photo, graphic, etc.")
    
    def __unicode__(self):
        return u'%s %s' % (self.first_name, self.last_name)
    def get_absolute_url(self):
        return '/staff/view/%s/' % self.slug
    def save(self, *args, **kwargs):
        """Saves the model and resizes the mugshot to 125 pixels wide."""
        super(Staffer, self).save(*args, **kwargs)
        if self.mugshot:
            imaging.save_thumbnail(self.mugshot, width=125, filename=self.mugshot.path)

    def get_full_name(self):
        return "%s %s" % (self.first_name, self.last_name)

    def writer_position(self):
        """The Maneater's standard definitions in Python."""
        articles = self.article_set.order_by('-pub_date')
        if articles.count() < 5:
            return 'Reporter'
        else:
            TWO_SEMESTERS = timedelta(240)  # Eight months is about right.
            latest_article_date = articles[0].pub_date
            earliest_article_date = articles.reverse()[0].pub_date
            if latest_article_date >= earliest_article_date + TWO_SEMESTERS:
                return 'Senior Staff Writer'
            else:
                return 'Staff Writer'
    def photographer_position(self):
        """The Maneater's standard definitions in Python."""
        photos = self.photo_set.order_by('-pub_date')
        if photos.count() < 5:
            return 'Photographer'
        else:
            TWO_SEMESTERS = timedelta(240)  # Eight months is about right.
            latest_photo_date = photos[0].pub_date
            earliest_photo_date = photos.reverse()[0].pub_date
            if latest_photo_date >= earliest_photo_date + TWO_SEMESTERS:
                return 'Senior Staff Photographer'
            else:
                return 'Staff Photographer'
    def editor_title(self):
        titles = self.tenure_set.filter(current=True).order_by('position')
        if not titles:
            return None
        else:
            top_current_title = titles[0]
            return top_current_title.position
    def last_activity(self):
        """Find the staffer's latest activity; set self.is_active accordingly.
        
        Returns latest activity date.
        Rather database-intensive, so don't do this too much.
        
        """
        # Start getting the latest of every type of content this person's
        # worked on.
        try:
            latest_article = self.article_set.latest()
        except Exception:
            latest_article = None
        try:
            latest_photo = self.photo_set.latest()
        except Exception:
            latest_photo = None
        try:
            latest_graphic = self.graphic_set.latest()
        except Exception:
            latest_graphic = None
        try:
            latest_page = self.page_set.latest()
        except Exception:
            latest_page = None
        
        # Keep going, but catch _any_ exception since it's possible the
        # associated application might not be installed.
        try:
            latest_blog_post = self.entry_set.latest()
        except Exception:
            latest_blog_post = None
        
        # Start comparing dates. End with the most recent one and set 
        # self.is_active accordingly. activity_date defaults to The Maneater's
        # birthday.
        ONE_YEAR_AGO = date.today() - timedelta(365)
        activity_date = date(1955,2,18)
        for item in [latest_article, latest_photo, latest_graphic, latest_page, latest_blog_post]:
            if item is not None and item.pub_date > activity_date:
                activity_date = item.pub_date
        if activity_date < ONE_YEAR_AGO:
            self.is_active = False
        else:
            self.is_active = True
        self.save(*args, **kwargs)
        return activity_date

    class Meta:
        ordering = ['first_name', 'last_name']

class Position(models.Model):
    """
    Provides support for named editor positions.
    """
    title = models.CharField(max_length=75, db_index=True)
    description = models.TextField(blank=True, help_text="What does this person do?")
    priority = models.PositiveSmallIntegerField(help_text="Controls order of editors' names when listed. Lower numbers are listed first.")
    
    def __unicode__(self):
        return self.title
    
    class Meta:
        ordering = ['priority', 'title']

class Tenure(models.Model):
    """
    Allows staffers to hold editor positions for various amounts of time.
    
    This model is edited inline as part of the Staffer change page.
    I considered using a start_date and end_date instead of time_held and 
    current, but this is a little more flexible.
    """
    editor = models.ForeignKey(Staffer, db_index=True)
    position = models.ForeignKey(Position)
    time_held = models.CharField(max_length=50, help_text="When did this person hold this position?")
    current = models.BooleanField(default=False, help_text="Does this person currently hold this position?")
    
    def __unicode__(self):
        return u'%s as %s' % (self.editor, self.position)
    
    class Meta:
        ordering = ['-current', 'position', 'editor']
