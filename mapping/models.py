# Imports from standard libraries
import re
import sys

# Imports from other dependencies
from geopy import geocoders

# Imports from Django
from django.conf import settings
from django.contrib.gis.db import models
from django.contrib.gis.geos import Point

# Imports from Brubeck
from brubeck.core.models import Content
from brubeck.publishing.models import Section
from brubeck.common.geography.models import Place
from brubeck.common.geography.fields import CoordinatesField


class Map(Content):
    """
    Provides support for maps that can be attached to other content.
    """
    title = models.CharField(max_length=30)
    description = models.TextField()
    slug = models.SlugField(help_text="Used for URLs. Autogenerated from title.")
    section = models.ForeignKey(Section)

    mediatype = 'map'
    
    objects = models.GeoManager()
    
    def __unicode__(self):
        return self.title
    def get_absolute_url(self):
        if self.section.publication.name == 'Columbia Prowl':
            return '/renters-guide/maps/%s/' % self.slug
        else:
            return '/maps/%s/' %  self.slug
    
    class Meta:
        ordering = ['title']

#class PlaceList(models.Model):
#    title = models.CharField(max_length=30)
#    description = models.TextField()
#    map = models.ForeignKey(Map)
#    places = models.ManyToManyField(Place)
#
#    def __unicode__(self):
#        return self.title

class MapPlaceLink(models.Model):
    map = models.ForeignKey(Map)
    place = models.ForeignKey(Place, help_text="Select a location to be included on this map.")
    additional_info = models.TextField(blank=True, help_text="Anything else visitors should know?")
    web_site = models.CharField(max_length=200, blank=True)
    
    objects = models.GeoManager()

    def __unicode__(self):
        return '%s (%s)' % (self.place.name, self.map.title)
